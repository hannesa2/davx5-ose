import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

/***************************************************************************************************
 * Copyright Â© All Contributors. See LICENSE and AUTHORS in the root directory for details.
 **************************************************************************************************/

apply plugin: 'com.android.application'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply from: 'locales.gradle'

android {
    compileSdkVersion 33
    buildToolsVersion '33.0.0'

    defaultConfig {
        applicationId "at.bitfire.davdroid"

        versionCode 403000002
        versionName '4.3-beta.1'
        buildConfigField "long", "buildTime", System.currentTimeMillis() + "L"
        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""

        setProperty "archivesBaseName", "davx5-ose-" + getVersionName()

        minSdkVersion 21        // Android 5
        targetSdkVersion 33     // Android 13

        buildConfigField "String", "userAgent", "\"DAVx5\""

        testInstrumentationRunner "at.bitfire.davdroid.CustomTestRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }

        applicationVariants.all { variant ->
            def locales = getLocales(variant.flavorName)

            variant.buildConfigField "String[]", "TRANSLATION_ARRAY", "new String[]{\"" + locales.join("\",\"") + "\"}"
            variant.mergedFlavor.resourceConfigurations.clear()
            variant.mergedFlavor.resourceConfigurations.addAll(locales)

            generateLocalesConfig(variant.flavorName, locales)
        }
    }

    compileOptions {
        // enable because ical4android requires desugaring
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
    }

    // Java namespace for our classes (not to be confused with Android package ID)
    namespace 'at.bitfire.davdroid'

    flavorDimensions "distribution"
    productFlavors {
        ose {
            versionNameSuffix "-ose"
        }
    }

    sourceSets {
        ose.res.srcDirs += "build/generated/res/locale-ose"

        androidTest.java.srcDirs = [ "src/androidTest/java" ]
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    signingConfigs {
        bitfire {
            storeFile file(System.getenv("ANDROID_KEYSTORE") ?: "/dev/null")
            storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ANDROID_KEY_ALIAS")
            keyPassword System.getenv("ANDROID_KEY_PASSWORD")
        }
        def out = services.get(StyledTextOutputFactory).create("")
        if (System.env.USER == "hannes") {
            release {
                def keystore = "${project.gradle.gradleUserHomeDir}/../.android/debug.keystore"
                out.style(Style.Normal).text("I run with user hannes using ")
                        .style(Style.SuccessHeader).println(keystore)
                storePassword "android"
                keyPassword "android"
                keyAlias "androiddebugkey"
                storeFile file(keystore)
            }
        } else if (System.getenv("TRAVIS")) {
            release {
                out.style(Style.Normal).text("I run on TRAVIS")
                storeFile file('../signing/release.keystore')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        } else {
            release {
                out.style(Style.Normal).text("I run on Github actions")
                storeFile file('../signing/release.keystore')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        }
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-release.pro'

            shrinkResources true

            signingConfig signingConfigs.release
        }
    }

    lint {
        disable 'GoogleAppIndexingWarning', 'ImpliedQuantity', 'MissingQuantity', 'MissingTranslation', 'ExtraTranslation', 'RtlEnabled', 'RtlHardcoded', 'Typos', 'NullSafeMutableLiveData'
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/*.md']
        }
    }
}

dependencies {
    implementation project(':cert4android')
    implementation project(':ical4android')
    implementation project(':vcard4android')

    implementation 'com.github.hannesa2:githubAppUpdate:2.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.0'

    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    kapt "com.google.dagger:hilt-android-compiler:${versions.hilt}"

    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'androidx.browser:browser:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.concurrent:concurrent-futures-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.fragment:fragment-ktx:1.5.5'
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.paging:paging-runtime-ktx:3.1.1'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.security:security-crypto:1.1.0-alpha04'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.google.android.material:material:1.7.0'

    def room_version = '2.5.0'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-paging:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    implementation 'com.jaredrummler:colorpicker:1.1.0'
    implementation "com.github.AppIntro:AppIntro:${versions.appIntro}"
    implementation("com.github.bitfireAT:dav4jvm:${versions.dav4jvm}") {
        exclude group: 'junit'
    }
    implementation "com.mikepenz:aboutlibraries:${versions.aboutLibraries}"
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:okhttp-brotli:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    //noinspection GradleDependency - don't update until API level 26 (Android 8) is the minimum API [https://github.com/bitfireAT/davx5/issues/130]
    implementation 'commons-io:commons-io:2.8.0'
    //noinspection GradleDependency - dnsjava 3+ needs Java 8/Android 7
    implementation 'dnsjava:dnsjava:2.1.9'
    //noinspection GradleDependency
    implementation "org.apache.commons:commons-collections4:${versions.commonsCollections}"
    //noinspection GradleDependency
    implementation "org.apache.commons:commons-lang3:${versions.commonsLang}"
    //noinspection GradleDependency
    implementation "org.apache.commons:commons-text:${versions.commonsText}"

    // for tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:${versions.hilt}"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:${versions.hilt}"

    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.5'
    androidTestImplementation 'androidx.work:work-testing:2.7.1'
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"
    androidTestImplementation 'io.mockk:mockk-android:1.13.2'
    androidTestImplementation 'junit:junit:4.13.2'

    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"
    testImplementation 'junit:junit:4.13.2'
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}
